import sqlalchemy
import pandas as pd
from sqlalchemy.orm import sessionmaker
import requests
import json
from datetime import datetime
import datetime
import sqlite3

DATABASE_LOCATION = "sqlite:///my_played_tracks.sqlite"
USER_ID = "Guitarfreak0118"

#This expires after a few minutes- so you might have to regenerate it later
TOKEN = "BQAMzij6ms7KXzIcf4bsUWsTRfI2L_seY1VdOleCotwtMVukVL_Pwk4LlcPIUdXFvNPJJ679D1WGtyiF1dMmuSieH8rEBqHWqVNick63_y7EB2NzCX1ALqGewCxTHwZ5uhpNf1ONI6hLijX9bXZck99_p6M"

#Another name for Transform could be Validation since we can do a lot of validation in the transform step of ETL
def check_if_valid_data(df: pd.DataFrame) -> bool:
    #Check if dataframe is empty
    if df.empty:
        print("No songs downloaded. Finishing execution")
        return False

    #Primary key check
    if pd.Series(df['played_at']).is_unique:
        pass
    else:
        raise Exception("Primary Key Check is violated")

    #Check for nulls
    if df.isnull().values.any():
        raise Exception("Null value found")

    #Check that all timestamps are from the last 24 hours
   # yesterday = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)

   # timestamps = df["timestamp"].tolist()
  #  for timestamp in timestamps:
   #     if datetime.datetime.strptime(timestamp, "%Y-%m-%d") != yesterday:
    #        raise Exception("At least one of the returned songsdoes not come from within the last 24 hours")


if __name__ == "__main__":
    headers = {
        "Accept" : "application/json",
        "Content-Type" : "application/json",
        "Authorization" : "Bearer {token}".format(token = TOKEN)
    }

    today = datetime.datetime.now()
    yesterday = today - datetime.timedelta(days=60)
    yesterday_unix_timestamp = int(yesterday.timestamp()) * 1000

    r=requests.get("https://api.spotify.com/v1/me/player/recently-played?after={time}".format(time=yesterday_unix_timestamp), headers = headers)

    data = r.json()

    print(data)

    song_names = []
    artist_names = []
    played_at_list = []
    timestamps = []

    for song in data["items"]:
        song_names.append(song["track"]["name"])
        artist_names.append(song["track"]["album"]["artists"][0]["name"])
        played_at_list.append(song["played_at"])
        timestamps.append(song["played_at"][0:10])


    song_dict = {
        "song_name" : song_names,
        "artist_name" : artist_names,
        "played_at" : played_at_list,
        "timestamp" : timestamps
    }

    song_df = pd.DataFrame(song_dict, columns = ["song_name", "artist_name", "played_at", "timestamp"])

#Validate our data
    if check_if_valid_data(song_df):
        print("Data valid, proceed to Load stage")

    print(song_df)

#Load data to database

    #Since database does not exist at first, it will be created automatically in the first run
    engine = sqlalchemy.create_engine(DATABASE_LOCATION)

    #Create connection to database
    conn = sqlite3.connect('my_played_tracks.sqlite')

    #pointer that allows us to connect to specific rows in our database
    cursor = conn.cursor()

    #Write SQL to create table
    sql_query = """
    CREATE TABLE IF NOT EXISTS my_played_tracks(
    song_name VARCHAR(200),
    artist_name VARCHAR(200),
    played_at VARCHAR(200),
    timestamp VARCHAR(200),
    CONSTRAINT primary_key_constraint PRIMARY KEY (played_at)

    )
"""

    cursor.execute(sql_query)
    print("Opened database successfully!")

    try:
        song_df.to_sql("my_played_tracks", engine, index=False, if_exists='append')
    except:
        print("Data already exists in the database")


    #Close connection
    conn.close()
    print("Closed Connection!")
